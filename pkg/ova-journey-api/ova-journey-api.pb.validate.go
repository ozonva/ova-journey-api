// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ova-journey-api.proto

package ova_journey_api

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
)

// Validate checks the field values on Journey with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Journey) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetJourneyId() <= 0 {
		return JourneyValidationError{
			field:  "JourneyId",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for UserId

	// no validation rules for Address

	// no validation rules for Description

	if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JourneyValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return JourneyValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// JourneyValidationError is the validation error returned by Journey.Validate
// if the designated constraints aren't met.
type JourneyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JourneyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JourneyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JourneyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JourneyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JourneyValidationError) ErrorName() string { return "JourneyValidationError" }

// Error satisfies the builtin error interface
func (e JourneyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJourney.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JourneyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JourneyValidationError{}

// Validate checks the field values on CreateJourneyRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateJourneyRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetUserId() <= 0 {
		return CreateJourneyRequestV1ValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for Address

	// no validation rules for Description

	if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateJourneyRequestV1ValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateJourneyRequestV1ValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateJourneyRequestV1ValidationError is the validation error returned by
// CreateJourneyRequestV1.Validate if the designated constraints aren't met.
type CreateJourneyRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateJourneyRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateJourneyRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateJourneyRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateJourneyRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateJourneyRequestV1ValidationError) ErrorName() string {
	return "CreateJourneyRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e CreateJourneyRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateJourneyRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateJourneyRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateJourneyRequestV1ValidationError{}

// Validate checks the field values on CreateJourneyResponseV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateJourneyResponseV1) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for JourneyId

	return nil
}

// CreateJourneyResponseV1ValidationError is the validation error returned by
// CreateJourneyResponseV1.Validate if the designated constraints aren't met.
type CreateJourneyResponseV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateJourneyResponseV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateJourneyResponseV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateJourneyResponseV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateJourneyResponseV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateJourneyResponseV1ValidationError) ErrorName() string {
	return "CreateJourneyResponseV1ValidationError"
}

// Error satisfies the builtin error interface
func (e CreateJourneyResponseV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateJourneyResponseV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateJourneyResponseV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateJourneyResponseV1ValidationError{}

// Validate checks the field values on DescribeJourneyRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeJourneyRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetJourneyId() <= 0 {
		return DescribeJourneyRequestV1ValidationError{
			field:  "JourneyId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// DescribeJourneyRequestV1ValidationError is the validation error returned by
// DescribeJourneyRequestV1.Validate if the designated constraints aren't met.
type DescribeJourneyRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeJourneyRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeJourneyRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeJourneyRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeJourneyRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeJourneyRequestV1ValidationError) ErrorName() string {
	return "DescribeJourneyRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeJourneyRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeJourneyRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeJourneyRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeJourneyRequestV1ValidationError{}

// Validate checks the field values on DescribeJourneyResponseV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *DescribeJourneyResponseV1) Validate() error {
	if m == nil {
		return nil
	}

	if v, ok := interface{}(m.GetJourney()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DescribeJourneyResponseV1ValidationError{
				field:  "Journey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// DescribeJourneyResponseV1ValidationError is the validation error returned by
// DescribeJourneyResponseV1.Validate if the designated constraints aren't met.
type DescribeJourneyResponseV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DescribeJourneyResponseV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DescribeJourneyResponseV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DescribeJourneyResponseV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DescribeJourneyResponseV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DescribeJourneyResponseV1ValidationError) ErrorName() string {
	return "DescribeJourneyResponseV1ValidationError"
}

// Error satisfies the builtin error interface
func (e DescribeJourneyResponseV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDescribeJourneyResponseV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DescribeJourneyResponseV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DescribeJourneyResponseV1ValidationError{}

// Validate checks the field values on ListJourneysRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListJourneysRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetOffset() < 0 {
		return ListJourneysRequestV1ValidationError{
			field:  "Offset",
			reason: "value must be greater than or equal to 0",
		}
	}

	if m.GetLimit() <= 0 {
		return ListJourneysRequestV1ValidationError{
			field:  "Limit",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// ListJourneysRequestV1ValidationError is the validation error returned by
// ListJourneysRequestV1.Validate if the designated constraints aren't met.
type ListJourneysRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListJourneysRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListJourneysRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListJourneysRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListJourneysRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListJourneysRequestV1ValidationError) ErrorName() string {
	return "ListJourneysRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e ListJourneysRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListJourneysRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListJourneysRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListJourneysRequestV1ValidationError{}

// Validate checks the field values on ListJourneysResponseV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListJourneysResponseV1) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetJourneys() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListJourneysResponseV1ValidationError{
					field:  fmt.Sprintf("Journeys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListJourneysResponseV1ValidationError is the validation error returned by
// ListJourneysResponseV1.Validate if the designated constraints aren't met.
type ListJourneysResponseV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListJourneysResponseV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListJourneysResponseV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListJourneysResponseV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListJourneysResponseV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListJourneysResponseV1ValidationError) ErrorName() string {
	return "ListJourneysResponseV1ValidationError"
}

// Error satisfies the builtin error interface
func (e ListJourneysResponseV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListJourneysResponseV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListJourneysResponseV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListJourneysResponseV1ValidationError{}

// Validate checks the field values on RemoveJourneyRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveJourneyRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetJourneyId() <= 0 {
		return RemoveJourneyRequestV1ValidationError{
			field:  "JourneyId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// RemoveJourneyRequestV1ValidationError is the validation error returned by
// RemoveJourneyRequestV1.Validate if the designated constraints aren't met.
type RemoveJourneyRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveJourneyRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveJourneyRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveJourneyRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveJourneyRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveJourneyRequestV1ValidationError) ErrorName() string {
	return "RemoveJourneyRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveJourneyRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveJourneyRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveJourneyRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveJourneyRequestV1ValidationError{}

// Validate checks the field values on MultiCreateJourneyRequestV1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateJourneyRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetJourneys()) < 1 {
		return MultiCreateJourneyRequestV1ValidationError{
			field:  "Journeys",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetJourneys() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiCreateJourneyRequestV1ValidationError{
					field:  fmt.Sprintf("Journeys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MultiCreateJourneyRequestV1ValidationError is the validation error returned
// by MultiCreateJourneyRequestV1.Validate if the designated constraints
// aren't met.
type MultiCreateJourneyRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateJourneyRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateJourneyRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateJourneyRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateJourneyRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateJourneyRequestV1ValidationError) ErrorName() string {
	return "MultiCreateJourneyRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateJourneyRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateJourneyRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateJourneyRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateJourneyRequestV1ValidationError{}

// Validate checks the field values on MultiCreateJourneyResponseV1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateJourneyResponseV1) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// MultiCreateJourneyResponseV1ValidationError is the validation error returned
// by MultiCreateJourneyResponseV1.Validate if the designated constraints
// aren't met.
type MultiCreateJourneyResponseV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateJourneyResponseV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateJourneyResponseV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateJourneyResponseV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateJourneyResponseV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateJourneyResponseV1ValidationError) ErrorName() string {
	return "MultiCreateJourneyResponseV1ValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateJourneyResponseV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateJourneyResponseV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateJourneyResponseV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateJourneyResponseV1ValidationError{}

// Validate checks the field values on UpdateJourneyRequestV1 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateJourneyRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetJourney() == nil {
		return UpdateJourneyRequestV1ValidationError{
			field:  "Journey",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetJourney()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateJourneyRequestV1ValidationError{
				field:  "Journey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateJourneyRequestV1ValidationError is the validation error returned by
// UpdateJourneyRequestV1.Validate if the designated constraints aren't met.
type UpdateJourneyRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateJourneyRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateJourneyRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateJourneyRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateJourneyRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateJourneyRequestV1ValidationError) ErrorName() string {
	return "UpdateJourneyRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateJourneyRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateJourneyRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateJourneyRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateJourneyRequestV1ValidationError{}

// Validate checks the field values on CreateJourneyTaskRequestV1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateJourneyTaskRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetUserId() <= 0 {
		return CreateJourneyTaskRequestV1ValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
	}

	// no validation rules for Address

	// no validation rules for Description

	if v, ok := interface{}(m.GetStartTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateJourneyTaskRequestV1ValidationError{
				field:  "StartTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if v, ok := interface{}(m.GetEndTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateJourneyTaskRequestV1ValidationError{
				field:  "EndTime",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// CreateJourneyTaskRequestV1ValidationError is the validation error returned
// by CreateJourneyTaskRequestV1.Validate if the designated constraints aren't met.
type CreateJourneyTaskRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateJourneyTaskRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateJourneyTaskRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateJourneyTaskRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateJourneyTaskRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateJourneyTaskRequestV1ValidationError) ErrorName() string {
	return "CreateJourneyTaskRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e CreateJourneyTaskRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateJourneyTaskRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateJourneyTaskRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateJourneyTaskRequestV1ValidationError{}

// Validate checks the field values on RemoveJourneyTaskRequestV1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *RemoveJourneyTaskRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetJourneyId() <= 0 {
		return RemoveJourneyTaskRequestV1ValidationError{
			field:  "JourneyId",
			reason: "value must be greater than 0",
		}
	}

	return nil
}

// RemoveJourneyTaskRequestV1ValidationError is the validation error returned
// by RemoveJourneyTaskRequestV1.Validate if the designated constraints aren't met.
type RemoveJourneyTaskRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveJourneyTaskRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveJourneyTaskRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveJourneyTaskRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveJourneyTaskRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveJourneyTaskRequestV1ValidationError) ErrorName() string {
	return "RemoveJourneyTaskRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveJourneyTaskRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveJourneyTaskRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveJourneyTaskRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveJourneyTaskRequestV1ValidationError{}

// Validate checks the field values on MultiCreateJourneyTaskRequestV1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *MultiCreateJourneyTaskRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	if len(m.GetJourneys()) < 1 {
		return MultiCreateJourneyTaskRequestV1ValidationError{
			field:  "Journeys",
			reason: "value must contain at least 1 item(s)",
		}
	}

	for idx, item := range m.GetJourneys() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MultiCreateJourneyTaskRequestV1ValidationError{
					field:  fmt.Sprintf("Journeys[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// MultiCreateJourneyTaskRequestV1ValidationError is the validation error
// returned by MultiCreateJourneyTaskRequestV1.Validate if the designated
// constraints aren't met.
type MultiCreateJourneyTaskRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MultiCreateJourneyTaskRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MultiCreateJourneyTaskRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MultiCreateJourneyTaskRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MultiCreateJourneyTaskRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MultiCreateJourneyTaskRequestV1ValidationError) ErrorName() string {
	return "MultiCreateJourneyTaskRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e MultiCreateJourneyTaskRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMultiCreateJourneyTaskRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MultiCreateJourneyTaskRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MultiCreateJourneyTaskRequestV1ValidationError{}

// Validate checks the field values on UpdateJourneyTaskRequestV1 with the
// rules defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *UpdateJourneyTaskRequestV1) Validate() error {
	if m == nil {
		return nil
	}

	if m.GetJourney() == nil {
		return UpdateJourneyTaskRequestV1ValidationError{
			field:  "Journey",
			reason: "value is required",
		}
	}

	if v, ok := interface{}(m.GetJourney()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateJourneyTaskRequestV1ValidationError{
				field:  "Journey",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	return nil
}

// UpdateJourneyTaskRequestV1ValidationError is the validation error returned
// by UpdateJourneyTaskRequestV1.Validate if the designated constraints aren't met.
type UpdateJourneyTaskRequestV1ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateJourneyTaskRequestV1ValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateJourneyTaskRequestV1ValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateJourneyTaskRequestV1ValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateJourneyTaskRequestV1ValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateJourneyTaskRequestV1ValidationError) ErrorName() string {
	return "UpdateJourneyTaskRequestV1ValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateJourneyTaskRequestV1ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateJourneyTaskRequestV1.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateJourneyTaskRequestV1ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateJourneyTaskRequestV1ValidationError{}
