// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ova_journey_api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// JourneyApiV1Client is the client API for JourneyApiV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type JourneyApiV1Client interface {
	CreateJourneyV1(ctx context.Context, in *CreateJourneyRequestV1, opts ...grpc.CallOption) (*CreateJourneyResponseV1, error)
	DescribeJourneyV1(ctx context.Context, in *DescribeJourneyRequestV1, opts ...grpc.CallOption) (*DescribeJourneyResponseV1, error)
	ListJourneysV1(ctx context.Context, in *ListJourneysRequestV1, opts ...grpc.CallOption) (*ListJourneysResponseV1, error)
	RemoveJourneyV1(ctx context.Context, in *RemoveJourneyRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MultiCreateJourneyV1(ctx context.Context, in *MultiCreateJourneyRequestV1, opts ...grpc.CallOption) (*MultiCreateJourneyResponseV1, error)
	UpdateJourneyV1(ctx context.Context, in *UpdateJourneyRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreateJourneyTaskV1(ctx context.Context, in *CreateJourneyTaskRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RemoveJourneyTaskV1(ctx context.Context, in *RemoveJourneyTaskRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	MultiCreateJourneyTaskV1(ctx context.Context, in *MultiCreateJourneyTaskRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
	UpdateJourneyTaskV1(ctx context.Context, in *UpdateJourneyTaskRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type journeyApiV1Client struct {
	cc grpc.ClientConnInterface
}

func NewJourneyApiV1Client(cc grpc.ClientConnInterface) JourneyApiV1Client {
	return &journeyApiV1Client{cc}
}

func (c *journeyApiV1Client) CreateJourneyV1(ctx context.Context, in *CreateJourneyRequestV1, opts ...grpc.CallOption) (*CreateJourneyResponseV1, error) {
	out := new(CreateJourneyResponseV1)
	err := c.cc.Invoke(ctx, "/ova.journey.api.JourneyApiV1/CreateJourneyV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journeyApiV1Client) DescribeJourneyV1(ctx context.Context, in *DescribeJourneyRequestV1, opts ...grpc.CallOption) (*DescribeJourneyResponseV1, error) {
	out := new(DescribeJourneyResponseV1)
	err := c.cc.Invoke(ctx, "/ova.journey.api.JourneyApiV1/DescribeJourneyV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journeyApiV1Client) ListJourneysV1(ctx context.Context, in *ListJourneysRequestV1, opts ...grpc.CallOption) (*ListJourneysResponseV1, error) {
	out := new(ListJourneysResponseV1)
	err := c.cc.Invoke(ctx, "/ova.journey.api.JourneyApiV1/ListJourneysV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journeyApiV1Client) RemoveJourneyV1(ctx context.Context, in *RemoveJourneyRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ova.journey.api.JourneyApiV1/RemoveJourneyV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journeyApiV1Client) MultiCreateJourneyV1(ctx context.Context, in *MultiCreateJourneyRequestV1, opts ...grpc.CallOption) (*MultiCreateJourneyResponseV1, error) {
	out := new(MultiCreateJourneyResponseV1)
	err := c.cc.Invoke(ctx, "/ova.journey.api.JourneyApiV1/MultiCreateJourneyV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journeyApiV1Client) UpdateJourneyV1(ctx context.Context, in *UpdateJourneyRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ova.journey.api.JourneyApiV1/UpdateJourneyV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journeyApiV1Client) CreateJourneyTaskV1(ctx context.Context, in *CreateJourneyTaskRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ova.journey.api.JourneyApiV1/CreateJourneyTaskV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journeyApiV1Client) RemoveJourneyTaskV1(ctx context.Context, in *RemoveJourneyTaskRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ova.journey.api.JourneyApiV1/RemoveJourneyTaskV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journeyApiV1Client) MultiCreateJourneyTaskV1(ctx context.Context, in *MultiCreateJourneyTaskRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ova.journey.api.JourneyApiV1/MultiCreateJourneyTaskV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *journeyApiV1Client) UpdateJourneyTaskV1(ctx context.Context, in *UpdateJourneyTaskRequestV1, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/ova.journey.api.JourneyApiV1/UpdateJourneyTaskV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JourneyApiV1Server is the server API for JourneyApiV1 service.
// All implementations must embed UnimplementedJourneyApiV1Server
// for forward compatibility
type JourneyApiV1Server interface {
	CreateJourneyV1(context.Context, *CreateJourneyRequestV1) (*CreateJourneyResponseV1, error)
	DescribeJourneyV1(context.Context, *DescribeJourneyRequestV1) (*DescribeJourneyResponseV1, error)
	ListJourneysV1(context.Context, *ListJourneysRequestV1) (*ListJourneysResponseV1, error)
	RemoveJourneyV1(context.Context, *RemoveJourneyRequestV1) (*emptypb.Empty, error)
	MultiCreateJourneyV1(context.Context, *MultiCreateJourneyRequestV1) (*MultiCreateJourneyResponseV1, error)
	UpdateJourneyV1(context.Context, *UpdateJourneyRequestV1) (*emptypb.Empty, error)
	CreateJourneyTaskV1(context.Context, *CreateJourneyTaskRequestV1) (*emptypb.Empty, error)
	RemoveJourneyTaskV1(context.Context, *RemoveJourneyTaskRequestV1) (*emptypb.Empty, error)
	MultiCreateJourneyTaskV1(context.Context, *MultiCreateJourneyTaskRequestV1) (*emptypb.Empty, error)
	UpdateJourneyTaskV1(context.Context, *UpdateJourneyTaskRequestV1) (*emptypb.Empty, error)
	mustEmbedUnimplementedJourneyApiV1Server()
}

// UnimplementedJourneyApiV1Server must be embedded to have forward compatible implementations.
type UnimplementedJourneyApiV1Server struct {
}

func (UnimplementedJourneyApiV1Server) CreateJourneyV1(context.Context, *CreateJourneyRequestV1) (*CreateJourneyResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJourneyV1 not implemented")
}
func (UnimplementedJourneyApiV1Server) DescribeJourneyV1(context.Context, *DescribeJourneyRequestV1) (*DescribeJourneyResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeJourneyV1 not implemented")
}
func (UnimplementedJourneyApiV1Server) ListJourneysV1(context.Context, *ListJourneysRequestV1) (*ListJourneysResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListJourneysV1 not implemented")
}
func (UnimplementedJourneyApiV1Server) RemoveJourneyV1(context.Context, *RemoveJourneyRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveJourneyV1 not implemented")
}
func (UnimplementedJourneyApiV1Server) MultiCreateJourneyV1(context.Context, *MultiCreateJourneyRequestV1) (*MultiCreateJourneyResponseV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiCreateJourneyV1 not implemented")
}
func (UnimplementedJourneyApiV1Server) UpdateJourneyV1(context.Context, *UpdateJourneyRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJourneyV1 not implemented")
}
func (UnimplementedJourneyApiV1Server) CreateJourneyTaskV1(context.Context, *CreateJourneyTaskRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateJourneyTaskV1 not implemented")
}
func (UnimplementedJourneyApiV1Server) RemoveJourneyTaskV1(context.Context, *RemoveJourneyTaskRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveJourneyTaskV1 not implemented")
}
func (UnimplementedJourneyApiV1Server) MultiCreateJourneyTaskV1(context.Context, *MultiCreateJourneyTaskRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MultiCreateJourneyTaskV1 not implemented")
}
func (UnimplementedJourneyApiV1Server) UpdateJourneyTaskV1(context.Context, *UpdateJourneyTaskRequestV1) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateJourneyTaskV1 not implemented")
}
func (UnimplementedJourneyApiV1Server) mustEmbedUnimplementedJourneyApiV1Server() {}

// UnsafeJourneyApiV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to JourneyApiV1Server will
// result in compilation errors.
type UnsafeJourneyApiV1Server interface {
	mustEmbedUnimplementedJourneyApiV1Server()
}

func RegisterJourneyApiV1Server(s grpc.ServiceRegistrar, srv JourneyApiV1Server) {
	s.RegisterService(&JourneyApiV1_ServiceDesc, srv)
}

func _JourneyApiV1_CreateJourneyV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJourneyRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JourneyApiV1Server).CreateJourneyV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.journey.api.JourneyApiV1/CreateJourneyV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JourneyApiV1Server).CreateJourneyV1(ctx, req.(*CreateJourneyRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _JourneyApiV1_DescribeJourneyV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DescribeJourneyRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JourneyApiV1Server).DescribeJourneyV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.journey.api.JourneyApiV1/DescribeJourneyV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JourneyApiV1Server).DescribeJourneyV1(ctx, req.(*DescribeJourneyRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _JourneyApiV1_ListJourneysV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListJourneysRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JourneyApiV1Server).ListJourneysV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.journey.api.JourneyApiV1/ListJourneysV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JourneyApiV1Server).ListJourneysV1(ctx, req.(*ListJourneysRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _JourneyApiV1_RemoveJourneyV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveJourneyRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JourneyApiV1Server).RemoveJourneyV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.journey.api.JourneyApiV1/RemoveJourneyV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JourneyApiV1Server).RemoveJourneyV1(ctx, req.(*RemoveJourneyRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _JourneyApiV1_MultiCreateJourneyV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiCreateJourneyRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JourneyApiV1Server).MultiCreateJourneyV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.journey.api.JourneyApiV1/MultiCreateJourneyV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JourneyApiV1Server).MultiCreateJourneyV1(ctx, req.(*MultiCreateJourneyRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _JourneyApiV1_UpdateJourneyV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJourneyRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JourneyApiV1Server).UpdateJourneyV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.journey.api.JourneyApiV1/UpdateJourneyV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JourneyApiV1Server).UpdateJourneyV1(ctx, req.(*UpdateJourneyRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _JourneyApiV1_CreateJourneyTaskV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateJourneyTaskRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JourneyApiV1Server).CreateJourneyTaskV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.journey.api.JourneyApiV1/CreateJourneyTaskV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JourneyApiV1Server).CreateJourneyTaskV1(ctx, req.(*CreateJourneyTaskRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _JourneyApiV1_RemoveJourneyTaskV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveJourneyTaskRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JourneyApiV1Server).RemoveJourneyTaskV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.journey.api.JourneyApiV1/RemoveJourneyTaskV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JourneyApiV1Server).RemoveJourneyTaskV1(ctx, req.(*RemoveJourneyTaskRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _JourneyApiV1_MultiCreateJourneyTaskV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MultiCreateJourneyTaskRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JourneyApiV1Server).MultiCreateJourneyTaskV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.journey.api.JourneyApiV1/MultiCreateJourneyTaskV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JourneyApiV1Server).MultiCreateJourneyTaskV1(ctx, req.(*MultiCreateJourneyTaskRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _JourneyApiV1_UpdateJourneyTaskV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateJourneyTaskRequestV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JourneyApiV1Server).UpdateJourneyTaskV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ova.journey.api.JourneyApiV1/UpdateJourneyTaskV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JourneyApiV1Server).UpdateJourneyTaskV1(ctx, req.(*UpdateJourneyTaskRequestV1))
	}
	return interceptor(ctx, in, info, handler)
}

// JourneyApiV1_ServiceDesc is the grpc.ServiceDesc for JourneyApiV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var JourneyApiV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ova.journey.api.JourneyApiV1",
	HandlerType: (*JourneyApiV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateJourneyV1",
			Handler:    _JourneyApiV1_CreateJourneyV1_Handler,
		},
		{
			MethodName: "DescribeJourneyV1",
			Handler:    _JourneyApiV1_DescribeJourneyV1_Handler,
		},
		{
			MethodName: "ListJourneysV1",
			Handler:    _JourneyApiV1_ListJourneysV1_Handler,
		},
		{
			MethodName: "RemoveJourneyV1",
			Handler:    _JourneyApiV1_RemoveJourneyV1_Handler,
		},
		{
			MethodName: "MultiCreateJourneyV1",
			Handler:    _JourneyApiV1_MultiCreateJourneyV1_Handler,
		},
		{
			MethodName: "UpdateJourneyV1",
			Handler:    _JourneyApiV1_UpdateJourneyV1_Handler,
		},
		{
			MethodName: "CreateJourneyTaskV1",
			Handler:    _JourneyApiV1_CreateJourneyTaskV1_Handler,
		},
		{
			MethodName: "RemoveJourneyTaskV1",
			Handler:    _JourneyApiV1_RemoveJourneyTaskV1_Handler,
		},
		{
			MethodName: "MultiCreateJourneyTaskV1",
			Handler:    _JourneyApiV1_MultiCreateJourneyTaskV1_Handler,
		},
		{
			MethodName: "UpdateJourneyTaskV1",
			Handler:    _JourneyApiV1_UpdateJourneyTaskV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ova-journey-api.proto",
}
